diff -ruN anaconda-21.48.22.56/data/help/en-US/ClearOSPlaceholder.html anaconda-21.48.22.56-clear7/data/help/en-US/ClearOSPlaceholder.html
--- anaconda-21.48.22.56/data/help/en-US/ClearOSPlaceholder.html	1969-12-31 17:00:00.000000000 -0700
+++ anaconda-21.48.22.56-clear7/data/help/en-US/ClearOSPlaceholder.html	2016-08-05 23:14:41.286767090 -0600
@@ -0,0 +1,5 @@
+<body>
+<h1>The Anaconda built-in help</h1>
+<p>...is not yet available for this screen.</p>
+<p>You can check out the ClearOS resouces online at https://clearos.com/</p>
+</body>
diff -ruN anaconda-21.48.22.56/data/help/en-US/ClearOSPlaceholderWithLinks.html anaconda-21.48.22.56-clear7/data/help/en-US/ClearOSPlaceholderWithLinks.html
--- anaconda-21.48.22.56/data/help/en-US/ClearOSPlaceholderWithLinks.html	1969-12-31 17:00:00.000000000 -0700
+++ anaconda-21.48.22.56-clear7/data/help/en-US/ClearOSPlaceholderWithLinks.html	2016-08-05 23:14:41.288767097 -0600
@@ -0,0 +1,5 @@
+<body>
+<h1>The Anaconda built-in help</h1>
+<p>...is not yet available for this screen.</p>
+<p>You can check out the ClearOS resouces online at https://clearos.com/</p>
+</body>
diff -ruN anaconda-21.48.22.56/pyanaconda/bootloader.py anaconda-21.48.22.56-clear7/pyanaconda/bootloader.py
--- anaconda-21.48.22.56/pyanaconda/bootloader.py	2016-08-05 14:30:42.428788415 -0600
+++ anaconda-21.48.22.56-clear7/pyanaconda/bootloader.py	2016-08-05 23:14:41.292767112 -0600
@@ -1411,7 +1411,7 @@
 
     @property
     def stage2_format_types(self):
-        if productName.startswith("Red Hat ") or productName.startswith("CentOS"):
+        if productName.startswith("Red Hat ") or productName.startswith("CentOS") or productName.startswith("ClearOS"):
             return ["xfs", "ext4", "ext3", "ext2", "btrfs"]
         else:
             return ["ext4", "ext3", "ext2", "btrfs", "xfs"]
@@ -2105,7 +2105,7 @@
 
     @property
     def stage2_format_types(self):
-        if productName.startswith("Red Hat ") or productName.startswith("CentOS"):
+        if productName.startswith("Red Hat ") or productName.startswith("CentOS") or productName.startswith("ClearOS"):
             return ["xfs", "ext4", "ext3", "ext2"]
         else:
             return ["ext4", "ext3", "ext2", "xfs"]
diff -ruN anaconda-21.48.22.56/pyanaconda/constants.py anaconda-21.48.22.56-clear7/pyanaconda/constants.py
--- anaconda-21.48.22.56/pyanaconda/constants.py	2016-08-05 14:30:42.407788341 -0600
+++ anaconda-21.48.22.56-clear7/pyanaconda/constants.py	2016-08-05 23:14:41.295767123 -0600
@@ -37,7 +37,7 @@
 productArch = product.productArch
 bugzillaUrl = product.bugUrl
 isFinal = product.isFinal
-eulaLocation = "/usr/share/centos-release/EULA"
+eulaLocation = "/usr/share/clearos-release/EULA"
 
 # for use in device names, eg: "fedora", "rhel"
 shortProductName = productName.lower()
diff -ruN anaconda-21.48.22.56/pyanaconda/installclasses/clearos.py anaconda-21.48.22.56-clear7/pyanaconda/installclasses/clearos.py
--- anaconda-21.48.22.56/pyanaconda/installclasses/clearos.py	1969-12-31 17:00:00.000000000 -0700
+++ anaconda-21.48.22.56-clear7/pyanaconda/installclasses/clearos.py	2016-08-05 23:25:10.136134219 -0600
@@ -0,0 +1,122 @@
+#
+# rhel.py
+#
+# Copyright (C) 2010  Red Hat, Inc.  All rights reserved.
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+#
+
+from pyanaconda.installclass import BaseInstallClass
+from pyanaconda.product import productName
+from pyanaconda import network
+from pyanaconda import nm
+from pyanaconda.kickstart import getAvailableDiskSpace
+from blivet.partspec import *
+from blivet.platform import platform
+from blivet.devicelibs import swap
+from blivet.size import Size
+from pyanaconda.constants import *
+
+class RHELBaseInstallClass(BaseInstallClass):
+    name = "ClearOS Linux"
+    sortPriority = 20002
+    if not productName.startswith("ClearOS"):
+        hidden = True
+    defaultFS = "xfs"
+
+    bootloaderTimeoutDefault = 5
+
+    ignoredPackages = ["ntfsprogs", "reiserfs-utils", "hfsplus-tools"]
+
+    installUpdates = False
+
+    _l10n_domain = "comps"
+
+    efi_dir = "clearos"
+
+    help_placeholder = "ClearOSPlaceholder.html"
+    help_placeholder_with_links = "ClearOSPlaceholder.html"
+
+    def configure(self, anaconda):
+        BaseInstallClass.configure(self, anaconda)
+        self.setDefaultPartitioning(anaconda.storage)
+        anaconda.ksdata.firewall.enabled = False
+
+    def setNetworkOnbootDefault(self, ksdata):
+        if network.has_some_wired_autoconnect_device():
+            return
+        # choose the device used during installation
+        # (ie for majority of cases the one having the default route)
+        dev = network.default_route_device() \
+              or network.default_route_device(family="inet6")
+        if not dev:
+            return
+        # ignore wireless (its ifcfgs would need to be handled differently)
+        if nm.nm_device_type_is_wifi(dev):
+            return
+        network.update_onboot_value(dev, "yes", ksdata)
+
+    def setDefaultPartitioning(self, storage):
+        autorequests = [PartSpec(mountpoint="/", fstype=storage.defaultFSType,
+                                 size=1024, grow=True, btr=True, lv=True, 
+                                 thin=True, encrypted=True)]
+
+        bootreqs = platform.setDefaultPartitioning()
+        if bootreqs:
+            autorequests.extend(bootreqs)
+
+        disk_space = getAvailableDiskSpace(storage)
+        swp = swap.swapSuggestion(disk_space=disk_space)
+        autorequests.append(PartSpec(fstype="swap", size=swp, grow=False,
+                                     lv=True, encrypted=True))
+    
+        for autoreq in autorequests:
+            if autoreq.fstype is None:
+                if autoreq.mountpoint == "/boot":
+                    autoreq.fstype = storage.defaultBootFSType
+                else:
+                    autoreq.fstype = storage.defaultFSType
+    
+        storage.autoPartitionRequests = autorequests
+
+    def __init__(self):
+        BaseInstallClass.__init__(self)
+
+class RHELAtomicInstallClass(RHELBaseInstallClass):
+    name = "ClearOS Atomic Host"
+    sortPriority=21002
+    hidden = not productName.startswith(("ClearOS Atomic Host", "ClearOS Linux Atomic"))
+
+    def setDefaultPartitioning(self, storage):
+        autorequests = [PartSpec(mountpoint="/", fstype=storage.defaultFSType,
+                                size=Size("1GiB"), maxSize=Size("3GiB"), grow=True, lv=True)]
+
+        bootreqs = platform.setDefaultPartitioning()
+        if bootreqs:
+            autorequests.extend(bootreqs)
+
+        disk_space = getAvailableDiskSpace(storage)
+        swp = swap.swapSuggestion(disk_space=disk_space)
+        autorequests.append(PartSpec(fstype="swap", size=swp, grow=False,
+                                    lv=True, encrypted=True))
+
+        for autoreq in autorequests:
+            if autoreq.fstype is None:
+                if autoreq.mountpoint == "/boot":
+                    autoreq.fstype = storage.defaultBootFSType
+                    autoreq.size = Size("300MiB")
+                else:
+                    autoreq.fstype = storage.defaultFSType
+
+        storage.autoPartitionRequests = autorequests
diff -ruN anaconda-21.48.22.56/pyanaconda/installclasses/fedora.py anaconda-21.48.22.56-clear7/pyanaconda/installclasses/fedora.py
--- anaconda-21.48.22.56/pyanaconda/installclasses/fedora.py	2016-08-05 14:30:42.398788309 -0600
+++ anaconda-21.48.22.56-clear7/pyanaconda/installclasses/fedora.py	2016-08-05 23:14:41.301767145 -0600
@@ -25,7 +25,7 @@
 class FedoraBaseInstallClass(BaseInstallClass):
     name = "Fedora"
     sortPriority = 10000
-    if productName.startswith("Red Hat ") or productName.startswith("CentOS"):
+    if productName.startswith("Red Hat ") or productName.startswith("CentOS") or productName.startswith("ClearOS"):
         hidden = True
 
     _l10n_domain = "anaconda"
diff -ruN anaconda-21.48.22.56/pyanaconda/packaging/yumpayload.py anaconda-21.48.22.56-clear7/pyanaconda/packaging/yumpayload.py
--- anaconda-21.48.22.56/pyanaconda/packaging/yumpayload.py	2016-08-05 14:30:42.444788472 -0600
+++ anaconda-21.48.22.56-clear7/pyanaconda/packaging/yumpayload.py	2016-08-05 23:14:41.304767156 -0600
@@ -483,7 +483,7 @@
     def mirrorEnabled(self):
         with _yum_lock:
             # we just skip this on CentOS since we cant support it yet
-            if productName.startswith("CentOS"):
+            if productName.startswith("CentOS") or productName.startswith("ClearOS"):
               return False
             else:
               # yum initializes with plugins disabled, and when plugins are disabled
diff -ruN anaconda-21.48.22.56/pyanaconda/ui/gui/spokes/user.py anaconda-21.48.22.56-clear7/pyanaconda/ui/gui/spokes/user.py
--- anaconda-21.48.22.56/pyanaconda/ui/gui/spokes/user.py	2015-10-29 08:23:19.000000000 -0600
+++ anaconda-21.48.22.56-clear7/pyanaconda/ui/gui/spokes/user.py	2016-08-05 23:14:41.308767171 -0600
@@ -342,6 +342,10 @@
         self.b_advanced.set_sensitive(bool(self._user.name))
 
     @property
+    def showable(self):
+        return False
+
+    @property
     def status(self):
         if len(self.data.user.userList) == 0:
             return _("No user will be created")
diff -ruN anaconda-21.48.22.56/pyanaconda/ui/tui/spokes/user.py anaconda-21.48.22.56-clear7/pyanaconda/ui/tui/spokes/user.py
--- anaconda-21.48.22.56/pyanaconda/ui/tui/spokes/user.py	2015-10-29 08:23:19.000000000 -0600
+++ anaconda-21.48.22.56-clear7/pyanaconda/ui/tui/spokes/user.py	2016-08-05 23:14:41.312767186 -0600
@@ -106,7 +106,7 @@
 
     @property
     def showable(self):
-        return not (self.completed and flags.automatedInstall)
+        return False
 
     @property
     def mandatory(self):
